// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: api/board_v1/service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoardV1Client is the client API for BoardV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoardV1Client interface {
	// GET
	GetBoard(ctx context.Context, in *GetRequestBoard, opts ...grpc.CallOption) (*GetResponseBoard, error)
	GetTask(ctx context.Context, in *GetRequestTask, opts ...grpc.CallOption) (*GetResponseTask, error)
	GetTasks(ctx context.Context, in *GetRequestTasks, opts ...grpc.CallOption) (*GetResponseTasks, error)
	GetSubtasks(ctx context.Context, in *GetRequestSubtasks, opts ...grpc.CallOption) (*GetResponseSubtasks, error)
	GetUserAtBoard(ctx context.Context, in *GetRequestUserAtBoard, opts ...grpc.CallOption) (*GetResponseUserAtBoard, error)
	GetColumns(ctx context.Context, in *GetRequestColumns, opts ...grpc.CallOption) (*GetResponseColumns, error)
	GetStatus(ctx context.Context, in *GetRequestStatus, opts ...grpc.CallOption) (*GetResponseStatus, error)
	GetAllStatuses(ctx context.Context, in *GetRequestStatuses, opts ...grpc.CallOption) (*GetResponseStatuses, error)
	GetReports(ctx context.Context, in *GetRequestStatuses, opts ...grpc.CallOption) (*GetResponseStatuses, error)
	GetRoles(ctx context.Context, in *GetRequestRoles, opts ...grpc.CallOption) (*GetResponseRoles, error)
	// PUT
	PutColumn(ctx context.Context, in *Columns, opts ...grpc.CallOption) (*Columns, error)
	PutReports(ctx context.Context, in *Reports, opts ...grpc.CallOption) (*Reports, error)
	PutBoard(ctx context.Context, in *Boards, opts ...grpc.CallOption) (*Boards, error)
	PutTask(ctx context.Context, in *Tasks, opts ...grpc.CallOption) (*Tasks, error)
	PutSubtask(ctx context.Context, in *Subtasks, opts ...grpc.CallOption) (*Subtasks, error)
	PutComments(ctx context.Context, in *Comments, opts ...grpc.CallOption) (*Comments, error)
	AddUserToBoard(ctx context.Context, in *UsersBoard, opts ...grpc.CallOption) (*UsersBoard, error)
	// POST
	AddColumn(ctx context.Context, in *Columns, opts ...grpc.CallOption) (*Columns, error)
	AddReports(ctx context.Context, in *Reports, opts ...grpc.CallOption) (*Reports, error)
	CreateBoard(ctx context.Context, in *Boards, opts ...grpc.CallOption) (*Boards, error)
	AddTask(ctx context.Context, in *Tasks, opts ...grpc.CallOption) (*Tasks, error)
	AddSubtask(ctx context.Context, in *Subtasks, opts ...grpc.CallOption) (*Subtasks, error)
	AddComments(ctx context.Context, in *Comments, opts ...grpc.CallOption) (*Comments, error)
	// DELETE
	DeleteColumn(ctx context.Context, in *GetRequestColumns, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteReports(ctx context.Context, in *GetResponseReport, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteBoard(ctx context.Context, in *GetResponseBoard, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTask(ctx context.Context, in *GetResponseTask, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSubtask(ctx context.Context, in *GetResponseSubtasks, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteComments(ctx context.Context, in *GetResponseComments, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type boardV1Client struct {
	cc grpc.ClientConnInterface
}

func NewBoardV1Client(cc grpc.ClientConnInterface) BoardV1Client {
	return &boardV1Client{cc}
}

func (c *boardV1Client) GetBoard(ctx context.Context, in *GetRequestBoard, opts ...grpc.CallOption) (*GetResponseBoard, error) {
	out := new(GetResponseBoard)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/GetBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) GetTask(ctx context.Context, in *GetRequestTask, opts ...grpc.CallOption) (*GetResponseTask, error) {
	out := new(GetResponseTask)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) GetTasks(ctx context.Context, in *GetRequestTasks, opts ...grpc.CallOption) (*GetResponseTasks, error) {
	out := new(GetResponseTasks)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/GetTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) GetSubtasks(ctx context.Context, in *GetRequestSubtasks, opts ...grpc.CallOption) (*GetResponseSubtasks, error) {
	out := new(GetResponseSubtasks)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/GetSubtasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) GetUserAtBoard(ctx context.Context, in *GetRequestUserAtBoard, opts ...grpc.CallOption) (*GetResponseUserAtBoard, error) {
	out := new(GetResponseUserAtBoard)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/GetUserAtBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) GetColumns(ctx context.Context, in *GetRequestColumns, opts ...grpc.CallOption) (*GetResponseColumns, error) {
	out := new(GetResponseColumns)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/GetColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) GetStatus(ctx context.Context, in *GetRequestStatus, opts ...grpc.CallOption) (*GetResponseStatus, error) {
	out := new(GetResponseStatus)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) GetAllStatuses(ctx context.Context, in *GetRequestStatuses, opts ...grpc.CallOption) (*GetResponseStatuses, error) {
	out := new(GetResponseStatuses)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/GetAllStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) GetReports(ctx context.Context, in *GetRequestStatuses, opts ...grpc.CallOption) (*GetResponseStatuses, error) {
	out := new(GetResponseStatuses)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/GetReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) GetRoles(ctx context.Context, in *GetRequestRoles, opts ...grpc.CallOption) (*GetResponseRoles, error) {
	out := new(GetResponseRoles)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) PutColumn(ctx context.Context, in *Columns, opts ...grpc.CallOption) (*Columns, error) {
	out := new(Columns)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/PutColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) PutReports(ctx context.Context, in *Reports, opts ...grpc.CallOption) (*Reports, error) {
	out := new(Reports)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/PutReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) PutBoard(ctx context.Context, in *Boards, opts ...grpc.CallOption) (*Boards, error) {
	out := new(Boards)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/PutBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) PutTask(ctx context.Context, in *Tasks, opts ...grpc.CallOption) (*Tasks, error) {
	out := new(Tasks)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/PutTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) PutSubtask(ctx context.Context, in *Subtasks, opts ...grpc.CallOption) (*Subtasks, error) {
	out := new(Subtasks)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/PutSubtask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) PutComments(ctx context.Context, in *Comments, opts ...grpc.CallOption) (*Comments, error) {
	out := new(Comments)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/PutComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) AddUserToBoard(ctx context.Context, in *UsersBoard, opts ...grpc.CallOption) (*UsersBoard, error) {
	out := new(UsersBoard)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/AddUserToBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) AddColumn(ctx context.Context, in *Columns, opts ...grpc.CallOption) (*Columns, error) {
	out := new(Columns)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/AddColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) AddReports(ctx context.Context, in *Reports, opts ...grpc.CallOption) (*Reports, error) {
	out := new(Reports)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/AddReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) CreateBoard(ctx context.Context, in *Boards, opts ...grpc.CallOption) (*Boards, error) {
	out := new(Boards)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/CreateBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) AddTask(ctx context.Context, in *Tasks, opts ...grpc.CallOption) (*Tasks, error) {
	out := new(Tasks)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) AddSubtask(ctx context.Context, in *Subtasks, opts ...grpc.CallOption) (*Subtasks, error) {
	out := new(Subtasks)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/AddSubtask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) AddComments(ctx context.Context, in *Comments, opts ...grpc.CallOption) (*Comments, error) {
	out := new(Comments)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/AddComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) DeleteColumn(ctx context.Context, in *GetRequestColumns, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/DeleteColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) DeleteReports(ctx context.Context, in *GetResponseReport, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/DeleteReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) DeleteBoard(ctx context.Context, in *GetResponseBoard, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/DeleteBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) DeleteTask(ctx context.Context, in *GetResponseTask, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) DeleteSubtask(ctx context.Context, in *GetResponseSubtasks, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/DeleteSubtask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardV1Client) DeleteComments(ctx context.Context, in *GetResponseComments, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/board_v1.BoardV1/DeleteComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoardV1Server is the server API for BoardV1 service.
// All implementations must embed UnimplementedBoardV1Server
// for forward compatibility
type BoardV1Server interface {
	// GET
	GetBoard(context.Context, *GetRequestBoard) (*GetResponseBoard, error)
	GetTask(context.Context, *GetRequestTask) (*GetResponseTask, error)
	GetTasks(context.Context, *GetRequestTasks) (*GetResponseTasks, error)
	GetSubtasks(context.Context, *GetRequestSubtasks) (*GetResponseSubtasks, error)
	GetUserAtBoard(context.Context, *GetRequestUserAtBoard) (*GetResponseUserAtBoard, error)
	GetColumns(context.Context, *GetRequestColumns) (*GetResponseColumns, error)
	GetStatus(context.Context, *GetRequestStatus) (*GetResponseStatus, error)
	GetAllStatuses(context.Context, *GetRequestStatuses) (*GetResponseStatuses, error)
	GetReports(context.Context, *GetRequestStatuses) (*GetResponseStatuses, error)
	GetRoles(context.Context, *GetRequestRoles) (*GetResponseRoles, error)
	// PUT
	PutColumn(context.Context, *Columns) (*Columns, error)
	PutReports(context.Context, *Reports) (*Reports, error)
	PutBoard(context.Context, *Boards) (*Boards, error)
	PutTask(context.Context, *Tasks) (*Tasks, error)
	PutSubtask(context.Context, *Subtasks) (*Subtasks, error)
	PutComments(context.Context, *Comments) (*Comments, error)
	AddUserToBoard(context.Context, *UsersBoard) (*UsersBoard, error)
	// POST
	AddColumn(context.Context, *Columns) (*Columns, error)
	AddReports(context.Context, *Reports) (*Reports, error)
	CreateBoard(context.Context, *Boards) (*Boards, error)
	AddTask(context.Context, *Tasks) (*Tasks, error)
	AddSubtask(context.Context, *Subtasks) (*Subtasks, error)
	AddComments(context.Context, *Comments) (*Comments, error)
	// DELETE
	DeleteColumn(context.Context, *GetRequestColumns) (*emptypb.Empty, error)
	DeleteReports(context.Context, *GetResponseReport) (*emptypb.Empty, error)
	DeleteBoard(context.Context, *GetResponseBoard) (*emptypb.Empty, error)
	DeleteTask(context.Context, *GetResponseTask) (*emptypb.Empty, error)
	DeleteSubtask(context.Context, *GetResponseSubtasks) (*emptypb.Empty, error)
	DeleteComments(context.Context, *GetResponseComments) (*emptypb.Empty, error)
	mustEmbedUnimplementedBoardV1Server()
}

// UnimplementedBoardV1Server must be embedded to have forward compatible implementations.
type UnimplementedBoardV1Server struct {
}

func (UnimplementedBoardV1Server) GetBoard(context.Context, *GetRequestBoard) (*GetResponseBoard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoard not implemented")
}
func (UnimplementedBoardV1Server) GetTask(context.Context, *GetRequestTask) (*GetResponseTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedBoardV1Server) GetTasks(context.Context, *GetRequestTasks) (*GetResponseTasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedBoardV1Server) GetSubtasks(context.Context, *GetRequestSubtasks) (*GetResponseSubtasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubtasks not implemented")
}
func (UnimplementedBoardV1Server) GetUserAtBoard(context.Context, *GetRequestUserAtBoard) (*GetResponseUserAtBoard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAtBoard not implemented")
}
func (UnimplementedBoardV1Server) GetColumns(context.Context, *GetRequestColumns) (*GetResponseColumns, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumns not implemented")
}
func (UnimplementedBoardV1Server) GetStatus(context.Context, *GetRequestStatus) (*GetResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedBoardV1Server) GetAllStatuses(context.Context, *GetRequestStatuses) (*GetResponseStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStatuses not implemented")
}
func (UnimplementedBoardV1Server) GetReports(context.Context, *GetRequestStatuses) (*GetResponseStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReports not implemented")
}
func (UnimplementedBoardV1Server) GetRoles(context.Context, *GetRequestRoles) (*GetResponseRoles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedBoardV1Server) PutColumn(context.Context, *Columns) (*Columns, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutColumn not implemented")
}
func (UnimplementedBoardV1Server) PutReports(context.Context, *Reports) (*Reports, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutReports not implemented")
}
func (UnimplementedBoardV1Server) PutBoard(context.Context, *Boards) (*Boards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutBoard not implemented")
}
func (UnimplementedBoardV1Server) PutTask(context.Context, *Tasks) (*Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTask not implemented")
}
func (UnimplementedBoardV1Server) PutSubtask(context.Context, *Subtasks) (*Subtasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSubtask not implemented")
}
func (UnimplementedBoardV1Server) PutComments(context.Context, *Comments) (*Comments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutComments not implemented")
}
func (UnimplementedBoardV1Server) AddUserToBoard(context.Context, *UsersBoard) (*UsersBoard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToBoard not implemented")
}
func (UnimplementedBoardV1Server) AddColumn(context.Context, *Columns) (*Columns, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddColumn not implemented")
}
func (UnimplementedBoardV1Server) AddReports(context.Context, *Reports) (*Reports, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReports not implemented")
}
func (UnimplementedBoardV1Server) CreateBoard(context.Context, *Boards) (*Boards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBoard not implemented")
}
func (UnimplementedBoardV1Server) AddTask(context.Context, *Tasks) (*Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedBoardV1Server) AddSubtask(context.Context, *Subtasks) (*Subtasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubtask not implemented")
}
func (UnimplementedBoardV1Server) AddComments(context.Context, *Comments) (*Comments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComments not implemented")
}
func (UnimplementedBoardV1Server) DeleteColumn(context.Context, *GetRequestColumns) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteColumn not implemented")
}
func (UnimplementedBoardV1Server) DeleteReports(context.Context, *GetResponseReport) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReports not implemented")
}
func (UnimplementedBoardV1Server) DeleteBoard(context.Context, *GetResponseBoard) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBoard not implemented")
}
func (UnimplementedBoardV1Server) DeleteTask(context.Context, *GetResponseTask) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedBoardV1Server) DeleteSubtask(context.Context, *GetResponseSubtasks) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubtask not implemented")
}
func (UnimplementedBoardV1Server) DeleteComments(context.Context, *GetResponseComments) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComments not implemented")
}
func (UnimplementedBoardV1Server) mustEmbedUnimplementedBoardV1Server() {}

// UnsafeBoardV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardV1Server will
// result in compilation errors.
type UnsafeBoardV1Server interface {
	mustEmbedUnimplementedBoardV1Server()
}

func RegisterBoardV1Server(s grpc.ServiceRegistrar, srv BoardV1Server) {
	s.RegisterService(&BoardV1_ServiceDesc, srv)
}

func _BoardV1_GetBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestBoard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).GetBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/GetBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).GetBoard(ctx, req.(*GetRequestBoard))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).GetTask(ctx, req.(*GetRequestTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestTasks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/GetTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).GetTasks(ctx, req.(*GetRequestTasks))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_GetSubtasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestSubtasks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).GetSubtasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/GetSubtasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).GetSubtasks(ctx, req.(*GetRequestSubtasks))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_GetUserAtBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestUserAtBoard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).GetUserAtBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/GetUserAtBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).GetUserAtBoard(ctx, req.(*GetRequestUserAtBoard))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_GetColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestColumns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).GetColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/GetColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).GetColumns(ctx, req.(*GetRequestColumns))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).GetStatus(ctx, req.(*GetRequestStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_GetAllStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestStatuses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).GetAllStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/GetAllStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).GetAllStatuses(ctx, req.(*GetRequestStatuses))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_GetReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestStatuses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).GetReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/GetReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).GetReports(ctx, req.(*GetRequestStatuses))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).GetRoles(ctx, req.(*GetRequestRoles))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_PutColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Columns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).PutColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/PutColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).PutColumn(ctx, req.(*Columns))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_PutReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reports)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).PutReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/PutReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).PutReports(ctx, req.(*Reports))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_PutBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Boards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).PutBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/PutBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).PutBoard(ctx, req.(*Boards))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_PutTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tasks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).PutTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/PutTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).PutTask(ctx, req.(*Tasks))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_PutSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subtasks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).PutSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/PutSubtask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).PutSubtask(ctx, req.(*Subtasks))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_PutComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).PutComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/PutComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).PutComments(ctx, req.(*Comments))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_AddUserToBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersBoard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).AddUserToBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/AddUserToBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).AddUserToBoard(ctx, req.(*UsersBoard))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_AddColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Columns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).AddColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/AddColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).AddColumn(ctx, req.(*Columns))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_AddReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reports)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).AddReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/AddReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).AddReports(ctx, req.(*Reports))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_CreateBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Boards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).CreateBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/CreateBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).CreateBoard(ctx, req.(*Boards))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tasks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).AddTask(ctx, req.(*Tasks))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_AddSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subtasks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).AddSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/AddSubtask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).AddSubtask(ctx, req.(*Subtasks))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_AddComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).AddComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/AddComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).AddComments(ctx, req.(*Comments))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_DeleteColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestColumns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).DeleteColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/DeleteColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).DeleteColumn(ctx, req.(*GetRequestColumns))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_DeleteReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResponseReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).DeleteReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/DeleteReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).DeleteReports(ctx, req.(*GetResponseReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_DeleteBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResponseBoard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).DeleteBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/DeleteBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).DeleteBoard(ctx, req.(*GetResponseBoard))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResponseTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).DeleteTask(ctx, req.(*GetResponseTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_DeleteSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResponseSubtasks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).DeleteSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/DeleteSubtask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).DeleteSubtask(ctx, req.(*GetResponseSubtasks))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardV1_DeleteComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResponseComments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardV1Server).DeleteComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_v1.BoardV1/DeleteComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardV1Server).DeleteComments(ctx, req.(*GetResponseComments))
	}
	return interceptor(ctx, in, info, handler)
}

// BoardV1_ServiceDesc is the grpc.ServiceDesc for BoardV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoardV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "board_v1.BoardV1",
	HandlerType: (*BoardV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBoard",
			Handler:    _BoardV1_GetBoard_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _BoardV1_GetTask_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _BoardV1_GetTasks_Handler,
		},
		{
			MethodName: "GetSubtasks",
			Handler:    _BoardV1_GetSubtasks_Handler,
		},
		{
			MethodName: "GetUserAtBoard",
			Handler:    _BoardV1_GetUserAtBoard_Handler,
		},
		{
			MethodName: "GetColumns",
			Handler:    _BoardV1_GetColumns_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _BoardV1_GetStatus_Handler,
		},
		{
			MethodName: "GetAllStatuses",
			Handler:    _BoardV1_GetAllStatuses_Handler,
		},
		{
			MethodName: "GetReports",
			Handler:    _BoardV1_GetReports_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _BoardV1_GetRoles_Handler,
		},
		{
			MethodName: "PutColumn",
			Handler:    _BoardV1_PutColumn_Handler,
		},
		{
			MethodName: "PutReports",
			Handler:    _BoardV1_PutReports_Handler,
		},
		{
			MethodName: "PutBoard",
			Handler:    _BoardV1_PutBoard_Handler,
		},
		{
			MethodName: "PutTask",
			Handler:    _BoardV1_PutTask_Handler,
		},
		{
			MethodName: "PutSubtask",
			Handler:    _BoardV1_PutSubtask_Handler,
		},
		{
			MethodName: "PutComments",
			Handler:    _BoardV1_PutComments_Handler,
		},
		{
			MethodName: "AddUserToBoard",
			Handler:    _BoardV1_AddUserToBoard_Handler,
		},
		{
			MethodName: "AddColumn",
			Handler:    _BoardV1_AddColumn_Handler,
		},
		{
			MethodName: "AddReports",
			Handler:    _BoardV1_AddReports_Handler,
		},
		{
			MethodName: "CreateBoard",
			Handler:    _BoardV1_CreateBoard_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _BoardV1_AddTask_Handler,
		},
		{
			MethodName: "AddSubtask",
			Handler:    _BoardV1_AddSubtask_Handler,
		},
		{
			MethodName: "AddComments",
			Handler:    _BoardV1_AddComments_Handler,
		},
		{
			MethodName: "DeleteColumn",
			Handler:    _BoardV1_DeleteColumn_Handler,
		},
		{
			MethodName: "DeleteReports",
			Handler:    _BoardV1_DeleteReports_Handler,
		},
		{
			MethodName: "DeleteBoard",
			Handler:    _BoardV1_DeleteBoard_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _BoardV1_DeleteTask_Handler,
		},
		{
			MethodName: "DeleteSubtask",
			Handler:    _BoardV1_DeleteSubtask_Handler,
		},
		{
			MethodName: "DeleteComments",
			Handler:    _BoardV1_DeleteComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/board_v1/service.proto",
}
